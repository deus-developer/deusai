import functools
import re
import datetime
import peewee

from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Dispatcher, CallbackQueryHandler
from config import settings
from core import EventManager, MessageManager, Handler as InnerHandler, UpdateFilter, CommandFilter, CommandNameFilter, Update
from modules.statbot.karma import Karma
from modules import BasicModule
from models import ShopItem, ShopPurchase, PlayerStatHistory, Auction, AuctionMember
from decorators import command_handler, permissions
from decorators.permissions import is_admin
from decorators.users import get_player
from utils.functions import CustomInnerFilters
from decorators.update import inner_update
from decorators.log import log
from telegram.utils.helpers import mention_html
from ww6StatBotWorld import Wasteland

class ShopModuleUpdate(BasicModule): #TODO: –í–≤–µ—Å—Ç–∏ –º–µ—Ö–∞–Ω–∏–∑–º —Å–∫–∏–¥–æ–∫

    module_name = 'shop_update'

    def __init__(self, event_manager: EventManager, message_manager: MessageManager, dispatcher: Dispatcher):
        self.add_inner_handler(InnerHandler(CommandFilter('shop1'), self._shop_open,
                                [CustomInnerFilters.from_player, CustomInnerFilters.from_active_chat]))
        self.add_inner_handler(InnerHandler(CommandNameFilter('auctionp'), self._shop_auction_buy,
                                [CustomInnerFilters.from_player, CustomInnerFilters.from_active_chat]))

        self._re_category_slug = re.compile(r'^shop_open_(?P<slug>\w+)$')

        self._re_item_info = re.compile(r'^shop_info_(?P<user_id>\d+)$')
        self._re_auction_info = re.compile(r'^shop_auction_info_(?P<user_id>\d+)$')
        self._re_item_auctions = re.compile(r'^shop_auctions_(?P<user_id>\d+)$')
        self._re_item_buy = re.compile(r'^shop_buy_(?P<user_id>\d+)$')
        self._re_auction_exit = re.compile(r'^shop_auction_exit_(?P<user_id>\d+)$')
        
        self._re_crm_accept = re.compile(r'^crm_accept_(?P<user_id>\d+)$')
        self._re_crm_refuse = re.compile(r'^crm_refuse_(?P<user_id>\d+)$')
        self._re_crm_confirm = re.compile(r'^crm_confirm_(?P<user_id>\d+)$')
        self._re_crm_return = re.compile(r'^crm_return_(?P<user_id>\d+)$')


        self.add_handler(CallbackQueryHandler(self._shop_open_category_inline, pattern=self._re_category_slug))
        self.add_handler(CallbackQueryHandler(self._shop_info_inline, pattern=self._re_item_info))
        self.add_handler(CallbackQueryHandler(self._shop_auctions_inline, pattern=self._re_item_auctions))
        self.add_handler(CallbackQueryHandler(self._shop_buy_inline, pattern=self._re_item_buy))
        self.add_handler(CallbackQueryHandler(self._shop_auction_info_inline, pattern=self._re_auction_info))

        self.add_handler(CallbackQueryHandler(self._crm_accept, pattern=self._re_crm_accept))
        self.add_handler(CallbackQueryHandler(self._crm_refuse, pattern=self._re_crm_refuse))
        self.add_handler(CallbackQueryHandler(self._crm_confirm, pattern=self._re_crm_confirm))
        self.add_handler(CallbackQueryHandler(self._crm_return, pattern=self._re_crm_return))

        self.add_handler(CallbackQueryHandler(self._shop_open_inline, pattern=re.compile(r'^shop_openmain$')))

        super().__init__(event_manager, message_manager, dispatcher)
        self.event_manager.scheduler.add_job(self._crm_update_msgs, 'interval', minutes=5)

    @permissions(is_admin)
    def _shop_open(self, update: Update):
        text = (
                f'–ü—Ä–∏–≤–µ—Ç, {mention_html(update.invoker.user_id, update.player.nickname.capitalize())}!\n'
                '–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω –∞–ª—å—è–Ω—Å–∞ Deus Ex Machina\n'
                '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n'
                '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n'
            )
        buttons = []
        for category, description, slug in Wasteland.shop_category:
            text += f'‚óΩÔ∏è<b>{category}</b>: <code>{description}</code>\n'
            buttons.append([InlineKeyboardButton(text=category, callback_data=f'shop_open_{slug}')])
        return update.telegram_update.message.reply_text(text=text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='HTML')

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _shop_open_inline(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')
        text = (
                f'–ü—Ä–∏–≤–µ—Ç, {mention_html(update.invoker.user_id, update.player.nickname.capitalize())}!\n'
                '–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω –∞–ª—å—è–Ω—Å–∞ Deus Ex Machina\n'
                '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n'
                '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n'
            )
        buttons = []
        for category, description, slug in Wasteland.shop_category:
            text += f'‚óΩÔ∏è<b>{category}</b>: <code>{description}</code>\n'
            buttons.append([InlineKeyboardButton(text=category, callback_data=f'shop_open_{slug}')])
        if update.telegram_update.callback_query.message.date - datetime.datetime.now() > datetime.timedelta(hours=12):
            return update.telegram_update.callback_query.message.reply_text(text=text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='HTML')
        return update.telegram_update.callback_query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='HTML')

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _shop_open_category_inline(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')
        category_slug = self._re_category_slug.search(update.telegram_update.callback_query.data).group('slug')
        category_info = Wasteland.shop_category_by_slug.get(category_slug, None)
        if not category_info:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')

        text = (
                f'<b>·óí {category_info[0]} ·óï</b>\n'
                f'<code>{category_info[1]}</code>\n\n'
            )
        items = ShopItem.select()\
                        .where(ShopItem.category == category_slug)\
                        .order_by(ShopItem.price.desc(), ShopItem.limit.desc())

        buttons = [[InlineKeyboardButton(text='üîô–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', callback_data='shop_openmain')]]
        for item in items:
            text += f'‚óΩÔ∏è {item.name} [ {item.limit if item.limit != -1 else "‚ôæ"} —à—Ç. ]\n'
            buttons.append([InlineKeyboardButton(text=item.name, callback_data=f'shop_info_{item.id}')])

        if update.telegram_update.callback_query.message.date - datetime.datetime.now() > datetime.timedelta(hours=12):
            return update.telegram_update.callback_query.message.reply_text(text=text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='HTML')
        return update.telegram_update.callback_query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='HTML')

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _shop_info_inline(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')
        item_id = int(self._re_item_info.search(update.telegram_update.callback_query.data).group('user_id'))
        item = ShopItem.get_or_none(id=item_id)

        if not item:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        category_info = Wasteland.shop_category_by_slug.get(item.category, None)
        if not category_info:
            return update.telegram_update.callback_query.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')

        text = (
                f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item.name}\n'
                f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{item.price if item.price > 0 else "<i>–î–ê–†–û–ú</i>"}‚òØÔ∏è</code>\n'
                f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {item.description}'
            )
        buttons = [[InlineKeyboardButton(text=f'üîô{category_info[0]}', callback_data=f'shop_open_{item.category}')]]
        if item.is_auction:
            text += f'\n\n<code>–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞—ë—Ç—Å—è, —á–µ—Ä–µ–∑ –∞—É–∫—Ü–∏–æ–Ω. –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ê—É–∫—Ü–∏–æ–Ω—ã"</code>'
            buttons.append([InlineKeyboardButton(text='üèõ–ê—É–∫—Ü–∏–æ–Ω—ã', callback_data=f'shop_auctions_{item.id}')])
        else:
            buttons.append([InlineKeyboardButton(text='üõí–ö—É–ø–∏—Ç—å', callback_data=f'shop_buy_{item.id}')])
        if update.telegram_update.callback_query.message.date - datetime.datetime.now() > datetime.timedelta(hours=12):
            return update.telegram_update.callback_query.message.reply_text(text=text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='HTML')
        return update.telegram_update.callback_query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='HTML')

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _shop_auctions_inline(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')
        item_id = int(self._re_item_auctions.search(update.telegram_update.callback_query.data).group('user_id'))
        item = ShopItem.get_or_none(id=item_id)

        if not item:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        category_info = Wasteland.shop_category_by_slug.get(item.category, None)
        if not category_info:
            return update.telegram_update.callback_query.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')

        if not item.is_auction:
            return update.telegram_update.callback_query.answer('–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∞—É–∫—Ü–∏–æ–Ω')

        if item.limit <= 0:
            return update.telegram_update.callback_query.answer('–õ–∏–º–∏—Ç –Ω–∞ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏—Å—á–µ—Ä–ø–∞–Ω. –î–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–π–¥–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏.')

        buttons = [[InlineKeyboardButton(text=f'üîô–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è "{item.name}"', callback_data=f'shop_info_{item_id}')]]
        auctions = item.auctions.filter(Auction.status == 0)

        text = (
                f'<b>–ê—É–∫—Ü–∏–æ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "{item.name}"</b>\n'
                f'<b>–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:</b> <code>{item.price if item.price > 0 else "–ù–µ—Ç —Ü–µ–Ω—ã –±—Ä–∞—Ç–∏—à–∫–∞, —Å–∫–æ–∫ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞–π"}‚òØÔ∏è</code>\n\n'
                f'<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ—Ç—ã:</b>\n'
            )
        for auction in auctions:
            auction_data = AuctionMember.select(peewee.fn.COUNT(AuctionMember.player), peewee.fn.MAX(AuctionMember.price))\
                                        .where(AuctionMember.auction_id == auction.id)\
                                        .group_by(AuctionMember.auction_id)\
                                        .limit(1)\
                                        .tuples()
            if not auction_data:
                members = 0
                price = item.price
            else:
                members = auction_data[0][0]
                price = auction_data[0][1]

            text += (
                        f'\t\t<b>–õ–æ—Ç #{auction.id}</b>\n'
                        f'\t\t\t‚óΩÔ∏è<b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {members}\n'
                        f'\t\t\t‚óΩÔ∏è<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {price}‚òØÔ∏è\n\n'
                    )
            buttons.append([InlineKeyboardButton(text=f'–õ–æ—Ç #{auction.id}', callback_data=f'shop_auction_info_{auction.id}')])
        update.telegram_update.callback_query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='HTML')

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _shop_auction_info_inline(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')
        auction_id = int(self._re_auction_info.search(update.telegram_update.callback_query.data).group('user_id'))
        auction = Auction.get_or_none(id=auction_id)

        if not auction:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        item = auction.item
        if auction.status == 1:
            return update.telegram_update.callback_query.answer('–≠—Ç–æ—Ç –∞—É–∫—Ü–∏–æ–Ω —É–∂–µ –æ–∫–æ–Ω—á–∏–ª—Å—è!')

        text = (
                f'<b>–õ–æ—Ç #{auction.id}</b> –Ω–∞ "{item.name}"\n'
                f'<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n'
            )
        auction_data = AuctionMember.select()\
                                    .where(AuctionMember.auction_id == auction.id)\
                                    .order_by(AuctionMember.price.desc())
        for member in auction_data:
            player = member.player
            delta = int(member.price / item.price * 100) - 100

            text += f'‚óΩÔ∏è{mention_html(player.telegram_user_id, player.nickname.capitalize())}: {member.price}‚òØÔ∏è ( {"+" if delta >= 0 else ""}{delta}% )\n'
        text += (
                '\n<code>–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª—É—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ</code>\n'
                f'<b>/auctionp_{auction.id} –¢—É—Ç –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞</b>'
            )
        buttons = [[InlineKeyboardButton(text=f'üèõ–í—Å–µ –ê—É–∫—Ü–∏–æ–Ω—ã', callback_data=f'shop_auctions_{item.id}')]]
        return update.telegram_update.callback_query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode='HTML')

    @permissions(is_admin)
    def _shop_auction_buy(self, update: Update):
        auction_id = update.command.subcommand
        if not auction_id:
            return

        if not auction_id.isdigit():
            return update.telegram_update.message.reply_text('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!')
        auction_id = int(auction_id)
        auction = Auction.get_or_none(id=auction_id)
        if not auction:
            return update.telegram_update.message.reply_text(f'–ê—É–∫—Ü–∏–æ–Ω–∞ —Å ID={auction_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')

        if not update.command.argument.isdigit():
            return update.telegram_update.message.reply_text('–°—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!')
        item = auction.item

        price = int(update.command.argument)
        if price < item.price:
            return update.telegram_update.message.reply_text('–°—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω—ã –ª–æ—Ç–∞!')
        max_price = AuctionMember.select(peewee.fn.MAX(AuctionMember.price)).where(AuctionMember.auction_id == auction.id).limit(1).scalar()
        max_price = max_price if max_price else 0

        curret_price = int(max_price * 1.05)
        if price < curret_price:
            return update.telegram_update.message.reply_text('–°—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ—à—å–Ω–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ª–æ—Ç * 1.05!')

        member = auction.members.filter(AuctionMember.player_id == update.player.id).limit(1)
        member = member.get() if member.exists() else AuctionMember(auction=auction, player=player, price=0, last_update=update.date)
        karma_delta = price - member.price
        member.price = price
        member.save()
        notify_text = (
                        f'<b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ –ª–æ—Ç—É #{auction.id}</b>\n'
                        f'<i>–¢–æ–≤–∞—Ä: "{item.name}"</i>\n'
                        f'<b>{mention_html(update.invoker.chat_id, update.player.nickname.capitalize())} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ—é —Å—Ç–∞–≤–∫—É\n'
                        f'<b>–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> <code>{price}</code>‚òØÔ∏è\n'
                    )
        markup = InlineKeyboardMarkup([
                                        [InlineKeyboardButton(text=f'‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ "{item.name}"', callback_data=f'shop_info_{item.id}')],
                                        [InlineKeyboardButton(text='‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ üèõ–ê—É–∫—Ü–∏–æ–Ω—É', callback_data=f'shop_auction_info_{auction.id}')],
                                        [InlineKeyboardButton(text='‚ùå–í—ã–π—Ç–∏ –∏–∑ üèõ–ê—É–∫—Ü–∏–æ–Ω–∞', callback_data=f'shop_auction_exit_{auction.id}')]
                                    ])
        u = Update()
        u.karma_ = Karma(
                            module_name='shop', recivier=update.player,
                            sender=update.player, amount=-karma_delta,
                            description=f'–°–Ω—è—Ç–∏–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ {auction.id}')
        self.event_manager.invoke_handler_update(u)
        for member in auction.members.filter(AuctionMember.player_id != update.player.id):
            text = notify_text
            text += f'<b>–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞:</b> <code>{member.price}</code>‚òØÔ∏è'
            self.message_manager.send_message(chat_id=member.player.telegram_user_id, text=text, reply_markup=markup, parse_mode='HTML')
        return update.telegram_update.message.reply_text(
                                                            text=f'–Ø –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ—é —Å—Ç–∞–≤–∫—É –ø–æ –ª–æ—Ç—É #{auction.id}\n'
                                                                 f'–° —Ç–µ–±—è —Å–Ω—è–ª {karma_delta}‚òØÔ∏è',
                                                            reply_markup=markup)

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _shop_buy_inline(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')
        item_id = int(self._re_item_buy.search(update.telegram_update.callback_query.data).group('user_id'))
        item = ShopItem.get_or_none(id=item_id)

        if not item:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        category_info = Wasteland.shop_category_by_slug.get(item.category, None)
        if not category_info:
            return update.telegram_update.callback_query.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')

        if item.is_auction:
            return update.telegram_update.callback_query.answer('–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞—É–∫—Ü–∏–æ–Ω!')

        if item.limit <= 0:
            return update.telegram_update.callback_query.answer('–õ–∏–º–∏—Ç –Ω–∞ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏—Å—á–µ—Ä–ø–∞–Ω. –î–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–π–¥–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏.')

        if item.price > update.player.karma:
            return update.telegram_update.callback_query.answer(f'–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {item.price - update.player.karma} –∫–∞—Ä–º—ã')

        message = self.message_manager.bot.send_message(chat_id=settings.CRM_SHOP_CHAT_ID, text='–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞.', is_queued=False)
        purchare = ShopPurchase.create(
                                        item=item,
                                        player=update.player,
                                        executor=None,
                                        status=0,
                                        price=item.price,
                                        message_id=message.message_id,
                                        chat_id=message.chat_id
                                    )
        self._crm_task_edit(purchare)
        item.limit -= 1
        item.save()
        u = Update()
        u.karma_ = Karma(
                            module_name='shop', recivier=update.player,
                            sender=update.player, amount=-item.price,
                            description=f'–°–Ω—è—Ç–∏–µ –∑–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ {item.name}')
        self.event_manager.invoke_handler_update(u)
        return update.telegram_update.callback_query.answer(f'–ó–∞–Ω—ë—Å —Ç–≤–æ—é –ø–æ–∫—É–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫.')
    
    def _crm_status_text(self, status_id: int) -> str:
        if status_id == 0:
            return '–û–∂–∏–¥–∞–µ—Ç'
        elif status_id == 1:
            return '–ü—Ä–∏–Ω—è—Ç–æ'
        elif status_id == 2:
            return '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
        elif status_id == 3:
            return '–û—Ç–∫–∞–∑–∞–Ω–æ'
        
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    def _crm_update_msgs(self):
        posts = []
        to_delete_message_ids = []
        to_update_posts = []

        purchares = ShopPurchase.select()\
                                .where(ShopPurchase.status.not_in([2, 3]))\
                                .filter(ShopPurchase.last_update < datetime.datetime.now() - datetime.timedelta(hours=12))

        for purchare in purchares:
            player = purchare.player
            executor = purchare.executor
            item = purchare.item
            stats = player.history_stats.filter(PlayerStatHistory.time < purchare.created_date).order_by(PlayerStatHistory.time.desc()).limit(1)
            stats = stats.get() if stats.exists() else None
            if not stats:
                continue

            text = (
                    f'{mention_html(player.telegram_user_id, player.nickname.capitalize())} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å "{item.name}"\n'
                    f'<b>–†–µ–π–¥–æ–≤—ã–µ –±–∞–ª–ª—ã:</b> <code>{stats.raid_points}</code>\n'
                    f'<b>–ö–∞—Ä–º–∞:</b> <code>{stats.karma}</code>\n\n'
                    f'<b>–°—Ç–∞—Ç—É—Å:</b> <b>#{self._crm_status_text(purchare.status)}</b>\n'
                    f'<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {mention_html(executor.telegram_user_id, executor.nickname.capitalize()) if purchare.executor else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}\n\n'
                    f'<b>–î–∞—Ç–∞:</b> <code>{purchare.created_date}</code>\n'
                    f'#–∑–∞—è–≤–∫–∞ #user_id{purchare.id}'
                )

            if purchare.status == 0:
                markup = InlineKeyboardMarkup([
                                                [InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'crm_accept_{purchare.id}')],
                                                [InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å', callback_data=f'crm_refuse_{purchare.id}')]
                                            ])
            elif purchare.status == 1:
                markup = InlineKeyboardMarkup([
                                                [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'crm_confirm_{purchare.id}')],
                                                [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å', callback_data=f'crm_return_{purchare.id}')]
                                            ])
            else:
                markup = None
            posts.append((purchare.id, purchare.chat_id, text, markup, item))
            to_delete_message_ids.append((purchare.message_id, purchare.chat_id))

        for message_id, chat_id in to_delete_message_ids:
            try:
                self.message_manager.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                self.logger.error(e)

        now = datetime.datetime.now()
        for purchare_id, chat_id, text, markup, item in posts:
            message = self.message_manager.bot.send_message(chat_id=chat_id, text=text, reply_markup=markup, parse_mode='HTML', is_queued=False)
            to_update_posts.append(
                                    {
                                        ShopPurchase.id: purchare_id,
                                        ShopPurchase.item_id: item.id,
                                        ShopPurchase.message_id: message.message_id,
                                        ShopPurchase.chat_id: message.chat_id,
                                        ShopPurchase.last_update: now
                                    }
                                )
        ShopPurchase.insert(to_update_posts).on_conflict(
                                                            conflict_target=[ShopPurchase.id],
                                                            update={
                                                                    ShopPurchase.id: peewee.EXCLUDED.id,
                                                                    ShopPurchase.message_id: peewee.EXCLUDED.message_id,
                                                                    ShopPurchase.item_id: peewee.EXCLUDED.item_id,
                                                                    ShopPurchase.chat_id: peewee.EXCLUDED.chat_id,
                                                                    ShopPurchase.last_update: peewee.EXCLUDED.last_update
                                                            }
                                                        ).execute()

    def _crm_task_edit(self, purchare: ShopPurchase):
        player = purchare.player
        executor = purchare.executor
        stats = player.history_stats.filter(PlayerStatHistory.time < purchare.created_date).order_by(PlayerStatHistory.time.desc()).limit(1)
        stats = stats.get() if stats.exists() else None
        if not stats:
            return

        text = (
                    f'{mention_html(player.telegram_user_id, player.nickname.capitalize())} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å "{purchare.item.name}"\n'
                    f'<b>–†–µ–π–¥–æ–≤—ã–µ –±–∞–ª–ª—ã:</b> <code>{stats.raid_points}</code>\n'
                    f'<b>–ö–∞—Ä–º–∞:</b> <code>{stats.karma}</code>\n\n'
                    f'<b>–°—Ç–∞—Ç—É—Å:</b> <b>#{self._crm_status_text(purchare.status)}</b>\n'
                    f'<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {mention_html(executor.telegram_user_id, executor.nickname.capitalize()) if purchare.executor else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}\n\n'
                    f'<b>–î–∞—Ç–∞:</b> <code>{purchare.created_date}</code>\n'
                    f'#–∑–∞—è–≤–∫–∞ #user_id{purchare.id}'
                )

        if purchare.status == 0:
            markup = InlineKeyboardMarkup([
                                            [InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'crm_accept_{purchare.id}')],
                                            [InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å', callback_data=f'crm_refuse_{purchare.id}')]
                                        ])
        elif purchare.status == 1:
            markup = InlineKeyboardMarkup([
                                            [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'crm_confirm_{purchare.id}')],
                                            [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å', callback_data=f'crm_return_{purchare.id}')]
                                        ])
        else:
            markup = None
        now = datetime.datetime.now()
        if purchare.last_update < now - datetime.timedelta(hours=12):
            try:
                self.message_manager.bot.delete_message(chat_id=purchare.chat_id, message_id=purchare.message_id)
            except Exception as e:
                pass
            message = self.message_manager.send_message(chat_id=purchare.chat_id, reply_markup=markup,
                                                        text=text, parse_mode='HTML', is_queued=False)
            purchare.message_id = message.message_id
            purchare.last_update = now
            purchare.save()
        else:
            self.message_manager.update_msg(chat_id=purchare.chat_id, message_id=purchare.message_id,
                                            text=text, reply_markup=markup, parse_mode='HTML')

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _crm_accept(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')

        purchare_id = self._re_crm_accept.search(update.telegram_update.callback_query.data)
        purchare_id = int(purchare_id.group('user_id'))
        purchare = ShopPurchase.get_or_none(id=purchare_id)
        if not purchare:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        purchare.status = 1
        purchare.executor = update.player
        purchare.save()
        self._crm_task_edit(purchare)
        return update.telegram_update.callback_query.answer('–¢—ã –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É, —É–¥–∞—á–∏ —Ç–µ–±–µ.')

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _crm_refuse(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')

        purchare_id = self._re_crm_refuse.search(update.telegram_update.callback_query.data)
        purchare_id = int(purchare_id.group('user_id'))
        purchare = ShopPurchase.get_or_none(id=purchare_id)
        if not purchare:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')

        purchare.status = 3
        purchare.executor = update.player
        purchare.save()
        self._crm_task_edit(purchare)
        item = purchare.item
        item.limit += 1
        item.save()
        update.telegram_update.callback_query.answer('–û—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É.')
        u = Update()
        u.karma_ = Karma(module_name='shop', recivier=purchare.player, sender=purchare.player,
                            amount=item.price, description=f'–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ {item.name}')
        self.event_manager.invoke_handler_update(u)
        return self.message_manager.send_message(
                                                    chat_id=purchare.player.telegram_user_id,
                                                    text=f'–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É "{item.name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n'
                                                         f'–í–æ–∑–≤—Ä–∞—Ç: {purchare.price}‚òØÔ∏è\n'
                                                        f'<i>¬©{mention_html(update.invoker.user_id, update.player.nickname.capitalize())}</i>',
                                                    parse_mode='HTML'
                                                )

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _crm_confirm(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')

        purchare_id = self._re_crm_confirm.search(update.telegram_update.callback_query.data)
        purchare_id = int(purchare_id.group('user_id'))
        purchare = ShopPurchase.get_or_none(id=purchare_id)
        if not purchare:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        if purchare.executor != update.player:
            return update.telegram_update.callback_query.answer('–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∑–∞—è–≤–∫–∞!')
        purchare.status = 2
        purchare.save()
        self._crm_task_edit(purchare)
        return update.telegram_update.callback_query.answer('–ö—Ä–∞—Å–∞–≤—á–∏–∫)')

    @log
    @inner_update()
    @get_player
    @permissions(is_admin)
    def _crm_return(self, update: Update):
        if not update.player:
            return update.telegram_update.callback_query.answer('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DeusAI!')

        purchare_id = self._re_crm_return.search(update.telegram_update.callback_query.data)
        purchare_id = int(purchare_id.group('user_id'))
        purchare = ShopPurchase.get_or_none(id=purchare_id)
        if not purchare:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        if purchare.executor != update.player:
            return update.telegram_update.callback_query.answer('–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∑–∞—è–≤–∫–∞!')
        purchare.status = 0
        purchare.executor = None
        purchare.save()
        self._crm_task_edit(purchare)
        return update.telegram_update.callback_query.answer('–í–µ—Ä–Ω—É–ª –∑–∞—è–≤–∫—É, —Ç—ã –ª–æ—Ö—ä.')