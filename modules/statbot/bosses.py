import re
from telegram import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Dispatcher, CallbackQueryHandler
from config import settings
from core import EventManager, MessageManager, Handler as InnerHandler, UpdateFilter, CommandFilter, Update
from models import Player, Boss
from modules import BasicModule
from utils.functions import CustomInnerFilters
from decorators.update import inner_update
from decorators.users import get_player

class BossModule(BasicModule):
    """
    message sending
    """
    module_name = 'boss'

    def __init__(self, event_manager: EventManager, message_manager: MessageManager, dispatcher: Dispatcher):
        self.add_inner_handler(InnerHandler(UpdateFilter('boss_spawn'), self._boss_spawned, []))
        self.add_inner_handler(InnerHandler(CommandFilter('bosses'), self._bosse_ls,
                                            [CustomInnerFilters.from_player, CustomInnerFilters.from_admin_chat_or_private]))

        self._re_boss_event = re.compile(r'^boss_(?P<event>(subscribe|unsubscribe))_(?P<boss_id>\d+)_(?P<group_type>\d+)$')
        self.add_handler(CallbackQueryHandler(self._boss_inline_event, pattern=self._re_boss_event))

        super().__init__(event_manager, message_manager, dispatcher)

    @inner_update()
    @get_player
    def _boss_inline_event(self, update: Update):
        boss_event = self._re_boss_event.search(update.telegram_update.callback_query.data)
        boss = Boss.get_or_none(id=int(boss_event.group('boss_id')))
        if not boss:
            return update.telegram_update.callback_query.answer('–¢–∞–∫–æ–≥–æ –ë–æ—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        subscribe = boss_event.group('event') == 'subscribe'

        subscribed = boss in update.player.boss_subscribes
        update_type = int(boss_event.group('group_type'))
        if subscribed == subscribe:
            return update.telegram_update.callback_query.answer(f'–¢—ã —É–∂–µ {"–ø–æ–¥–ø–∏—Å–∞–Ω" if subscribe else "–æ—Ç–ø–∏—Å–∞–Ω"} –æ—Ç —ç—Ç–æ–≥–æ –ë–æ—Å—Å–∞!')

        if subscribe:
            update.player.boss_subscribes.add(boss)
        else:
            update.player.boss_subscribes.remove(boss)

        if update_type == 0:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton(
                                                                    text=f'–û—Ç–ø–∏—Å–∞—Ç—å—Å—è' if subscribe else '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
                                                                    callback_data=f'boss_{"un" if subscribe else ""}subscribe_{boss.id}_0')]])
        elif update_type == 1:
            subscribers_id = [x.id for x in update.player.boss_subscribes]
            buttons = []
            for boss in Boss.select().order_by(Boss.hp.desc()):
                icon = '‚ûï' if boss.id in subscribers_id else ' '
                km_range = f'[{boss.start_km:02}–∫–º..{boss.last_km:02}–∫–º]'
                event = 'unsubscribe' if boss.id in subscribers_id else 'subscribe'

                buttons.append([InlineKeyboardButton(text=f'{icon}{boss.name}{km_range}', callback_data=f'boss_{event}_{boss.id}_1')])
            markup = InlineKeyboardMarkup(buttons)
        else:
            markup = None
        update.telegram_update.callback_query.edit_message_reply_markup(reply_markup=markup)
        update.telegram_update.callback_query.answer('–ì–æ—Ç–æ–≤–æ!')

    def _bosse_ls(self, update: Update):
        text = '–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å–ø–∞–≤–Ω–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ –ë–æ—Å—Å–∞!\n–ü–æ–ø—Ä–æ–±—É–π, —ç—Ç–æ –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ.'
        buttons = []

        subscribers_id = [x.id for x in update.player.boss_subscribes]
        for boss in Boss.select().order_by(Boss.hp.desc()):
            icon = '‚ûï' if boss.id in subscribers_id else ' '
            km_range = f'[{boss.start_km:02}–∫–º..{boss.last_km:02}–∫–º]'
            event = 'unsubscribe' if boss.id in subscribers_id else 'subscribe'

            buttons.append([InlineKeyboardButton(text=f'{icon}{boss.name}{km_range}', callback_data=f'boss_{event}_{boss.id}_1')])
        markup = InlineKeyboardMarkup(buttons)
        update.telegram_update.message.reply_text(text=text, reply_markup=markup)

    def _boss_spawned(self, update: Update):
        boss_name = update.boss_spawn.boss_name
        boss = Boss.get_or_none(name=boss_name)
        if not boss:
            return self.message_manager.send_message(chat_id=settings.ADMIN_CHAT_ID, text=f'–ë–æ—Å—Å–∞ "{boss_name}" –Ω–µ—Ç –≤ –±–∞–∑–µ!!!')
        text = (
                f'–ë–æ—Å—Å <b>{boss.name}</b> –ø–æ—è–≤–∏–ª—Å—è –≤ –ü—É—Å—Ç–æ—à–∏.\n'
                f'<b>‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ:</b> <code>{boss.hp}</code>\n'
                f'\n<code>–ò—Å–∫–∞—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç üë£{boss.start_km:02}–∫–º –¥–æ üë£{boss.last_km:02}–∫–º</code>'
            )
        markup = InlineKeyboardMarkup([[InlineKeyboardButton(text=f'–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data=f'boss_unsubscribe_{boss.id}_0')]])
        for player in boss.subscribers:
            self.message_manager.send_message(
                    chat_id=player.telegram_user_id,
                    text=text,
                    reply_markup=markup,
                    parse_mode='HTML'
                )