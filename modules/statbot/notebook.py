import datetime

from pytils import dt
from telegram.ext import Dispatcher

from config import settings
from core import (
    EventManager,
    Handler as InnerHandler,
    MessageManager,
    Update,
    UpdateFilter
)
from models import Notebook
from modules import BasicModule


class NotebookModule(BasicModule):  # TODO: –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–º–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    module_name = 'notebook'

    def __init__(self, event_manager: EventManager, message_manager: MessageManager, dispatcher: Dispatcher):
        self.add_inner_handler(InnerHandler(UpdateFilter('notebook'), self._parse_notebook))
        super().__init__(event_manager, message_manager, dispatcher)

        self.KEY_BY_NAME = {
            'üë£–ü—Ä–æ–π–¥–µ–Ω–æ': 'passed',
            '‚öîÔ∏è–£–±–∏—Ç–æ': 'kills_pve',
            'üî™–ü–æ–±–µ–∂–¥–µ–Ω–æ': 'kills_pvp',
            'üëÅ–£–¥–∞—Ä–∏–ª –≥–∏–≥–∞–Ω—Ç–∞': 'hit_giant',
            '‚öúÔ∏è–ü–æ–±–µ–∂–¥–µ–Ω–æ': 'win_boss',
            'üò∞–°–±–µ–∂–∞–ª –æ—Ç': 'escaped',
            'üëä–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤': 'participated',
            'üíâ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ': 'used_stim',
            'üíä–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ': 'used_speeds',
            'üö´–°–ª–æ–º–∞–Ω–æ': 'broken_things',
            'üïµÔ∏è–í—ã–ø–æ–ª–Ω–µ–Ω–æ': 'completed_assignments',
            'üéÅ–û—Ç–∫—Ä—ã—Ç–æ': 'open_gifts',
            'üéÅ–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ': 'send_gifts',
            'üó≥–û—Ç–∫—Ä—ã—Ç–æ': 'open_randbox',
            'üìØ–ü—Ä–æ–π–¥–µ–Ω–æ': 'dange_completed',
            '‚ö†Ô∏è–ü—Ä–æ—à–µ–ª –ø–µ—â–µ—Ä—É': 'passed_cave',
            '‚ö†Ô∏è–ù–µ –ø—Ä–æ—à–µ–ª –ø–µ—â–µ—Ä—É': 'not_passed_cave',
            '‚ö°Ô∏è–ü–æ–¥ –∫—É–ø–æ–ª–æ–º': 'win_of_dome',
            'üì¢–ü—Ä–∏–≥–ª–∞—Å–∏–ª': 'invited',
            'üóÑ–†–∞–∑–æ–±—Ä–∞–ª': 'open_box',
            '‚ö∞Ô∏è–£–º–µ—Ä': 'deads',
        }

    def _parse_notebook(self, update: Update):
        notebook = update.notebook
        now = datetime.datetime.now()
        timeout = datetime.timedelta(seconds=10)

        if update.timedelta >= timeout:
            return

        if now - update.player.last_update < timeout:
            return

        if not update.player.notebook:
            update.player.notebook = Notebook.create(last_update=timeout - datetime.timedelta(seconds=10))
            update.player.save()

        if update.player.notebook.last_update > update.telegram_update.message.forward_date.astimezone(settings.timezone):
            return self.message_manager.send_message(
                chat_id=update.telegram_update.message.chat_id,
                text='–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π –¥–Ω–µ–≤–Ω–∏–∫.'
            )
        delts = []
        for name, value, name2 in notebook.attrs:
            key = self.KEY_BY_NAME.get(name, 'buffer')
            last = getattr(update.player.notebook, key)
            if key == 'buffer' or (value - last) <= 0:
                continue
            delts.append([name, value - last, name2])
            setattr(update.player.notebook, key, value)

        output = ['\t<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞:</b>']
        for name, delta, name2 in delts:
            output.append(f'{name} <em>+{delta}</em><i>{name2}</i>')
        if len(output) == 1:
            output.append('\t\t\t<i>–û–π, –∞ –≥–¥–µ –æ–Ω–æ?</i>')

        output.append(f'\n\t<i><code>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {dt.distance_of_time_in_words(update.player.notebook.last_update, accuracy=3)}</code></i>')
        self.message_manager.send_message(
            chat_id=update.telegram_update.message.chat_id,
            text='\n'.join(output),
            parse_mode='HTML'
        )
        update.player.notebook.last_update = update.date
        update.player.notebook.save()
