import datetime
import json
import re

import telegram
from telegram import ParseMode
from telegram.ext import (
    Dispatcher,
    MessageHandler
)
from telegram.ext.filters import Filters

from config import settings
from core import (
    CommandFilter,
    EventManager,
    Handler as InnerHandler,
    MessageManager,
    Update
)
from decorators import (
    command_handler,
    permissions
)
from decorators.permissions import (
    is_admin,
    is_lider,
    or_
)
from models import (
    Group,
    Player,
    RaidAssign,
    RaidResult,
    Settings,
    TelegramChat
)
from modules import BasicModule
from utils.functions import (
    CustomFilters,
    CustomInnerFilters,
    last_raid
)
from ww6StatBotWorld import Wasteland


class RaidResultModule(BasicModule):  # TODO: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å
    module_name = 'raid_result'

    def __init__(self, event_manager: EventManager, message_manager: MessageManager, dispatcher: Dispatcher):
        self.add_handler(MessageHandler(CustomFilters.greatwar & Filters.text, self._parse_raid_result))
        self.add_inner_handler(InnerHandler(CommandFilter('raid_inform'), self._comm_inform, [CustomInnerFilters.from_player, CustomInnerFilters.from_active_chat]))

        super().__init__(event_manager, message_manager, dispatcher)

        self._re_is_raid_result = re.compile(r'–ò—Ç–æ–≥–∏ üëä–†–µ–π–¥–∞:')

        self._re_raid_location = re.compile(
            r'(?P<km>\d+)–∫–º+\s+(?P<location_name>.+)+\s+üèÜ\++(?P<rating>\d+)\s+'
            r'--(?P<league>.+)--'
        )

        self._re_raid_goats = re.compile(r'üêê\s*(?P<goat>.+):\s+(?P<percentRaid>\d+.\d+)%')

        self._re_raid_topraiders = re.compile(r'üéñ–õ—É—á—à–∏–µ —Ä–µ–π–¥–µ—Ä—ã\s+(.*)')
        self._re_raid_nick = re.compile(r'(?P<nick>.+)\[(?P<goat>.*)]')

        self._convert_status = {
            30: 0,
            35: 3,
            40: 3,
            -4: 0,
            -5: 0,
            -10: 0,
            -100: 0,
            -3: 0,
            0: 0,
            10: 0,
            20: 0
        }

    def _parse_raid_result(self, bot: telegram.Bot, update: telegram.Update):
        message = update.channel_post or update.message
        post_id = message.message_id or message.forward_from_chat.id
        date = message.date.astimezone(settings.timezone).replace(minute=0, second=0, microsecond=0)
        if RaidResult.exist_rows(date):
            return self.message_manager.send_message(
                chat_id=message.chat_id,
                text='–≠—Ç–æ—Ç —Ä–µ–π–¥ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ'
            )

        text = message.text or ''
        match = self._re_is_raid_result.match(text)
        if not match:
            return

        locations = text.split('\n\n')

        for location in locations:
            location_data = self._re_raid_location.search(location)
            if not location_data:
                continue

            km, location_name, up_rating, league = location_data.groups()
            raid_goats = self._re_raid_goats.findall(location)
            raid_nicks = self._re_raid_topraiders.search(location)

            our_raid = []
            _goats = [_g.name for _g in Group.select(Group.name).where(Group.type == 'goat')]
            for _goat in raid_goats:
                if _goat[0] in _goats:
                    our_raid.append(_goat)

            wingoat = ('[–ù–µ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ]', 0.00)
            ourgoat = ('', 0.00)

            if len(raid_goats) != 0:
                wingoat = raid_goats[0]

            if len(our_raid) != 0:
                ourgoat = our_raid[0]

            top_raiders = []
            if raid_nicks:
                top_raiders = [self._re_raid_nick.search(nicksamp).groups() for nicksamp in raid_nicks.group(1).split(',')]

            raid_result = RaidResult(
                km=km,
                name=location_name,
                rating=up_rating,
                league=league,
                wingoat=wingoat[0],
                wingoatpercent=wingoat[1],
                ourgoat=ourgoat[0],
                ourgoatpercent=ourgoat[1],
                goats=json.dumps(raid_goats),
                raiders=json.dumps(top_raiders),
                post_id=post_id,
                date=date
            )
            raid_result.save()

        if date >= last_raid():
            self._auto_result()

    @permissions(is_admin)
    def _comm_inform(self, update: Update):
        return self._auto_result()

    def _auto_result(self):
        date = last_raid(datetime.datetime.now() + datetime.timedelta(seconds=10))
        locations = RaidResult \
            .select() \
            .where(RaidResult.date == date)
        status = False
        if len(locations) == 0:
            message = f'–£–≤—ã, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–π–¥—É <b>{date.strftime("%d.%m.%Y %H:%M")}</b>.'
            status = True
        else:
            leagues = {}
            post_id = None
            for location in locations:
                if post_id is None:
                    post_id = location.post_id

                goats = leagues.get(location.league, {})
                info = goats.get(location.wingoat, {})

                locs_icons = info.get('locations', None)
                loc_icon = Wasteland.raid_locations_by_km.get(location.km, ('NonName', 'NonIcon'))[1]
                if locs_icons:
                    locs_icons.append(f'{loc_icon}({location.km})')
                else:
                    locs_icons = [f'{loc_icon}({location.km})']
                info.update(
                    {
                        'up_rating': info.get('up_rating', 0) + location.rating,
                        'locations': locs_icons,
                    }
                )
                goats.update(
                    {
                        location.wingoat: info
                    }
                )
                leagues.update(
                    {
                        location.league: goats
                    }
                )

            our_goats = [_g.name for _g in Group.select(Group.name).where((Group.type == 'goat') and (Group.is_active == True))]
            results = []

            leagues = sorted(leagues.items(), key=lambda pars: pars[0])

            for league, goats in leagues:
                results.append(f'\n<b>{league}</b>')
                goats = sorted(goats.items(), key=lambda pars: pars[1].get('up_rating', 0), reverse=True)
                for name, info in goats:
                    c_name = f'<b>{name}</b>' if name in our_goats else name
                    results.append(f"   üêê{c_name} +{info.get('up_rating', 0)}üçÄ\n     {' '.join(info.get('locations', []))}")

            message = f"<i>#–ò—Ç–æ–≥–∏—Ä–µ–π–¥–∞ –æ—Ç <a href='https://t.me/greatwar/{post_id}'>{date.strftime('%d.%m.%Y %H:%M')}</a></i>\n" + '\n'.join(results)
            status = True

        users = RaidAssign.select(Player.telegram_user_id.alias('chat_id')) \
            .join(Player, on=(Player.id == RaidAssign.player_id)) \
            .join(Settings, on=(Player.settings_id == Settings.id)) \
            .where((RaidAssign.time == date) & (Settings.pings['notify_raid_tz_report'] == 'true') & (RaidAssign.km_assigned << Wasteland.raid_kms_tz)) \
            .dicts()

        for user in users:
            try:
                self.message_manager.send_message(chat_id=user['chat_id'], text='<b>–†–µ–π–¥ –æ–∫–æ–Ω—á–µ–Ω! –£—Ö–æ–¥–∏ —Å —Ç–æ—á–∫–∏!!!!</b>', parse_mode=ParseMode.HTML)
            except (Exception,):
                pass

        for chat in TelegramChat.select(TelegramChat.chat_id).where(TelegramChat.is_active == True).dicts():
            try:
                self.message_manager.send_message(chat_id=chat['chat_id'], text=message, parse_mode=ParseMode.HTML)
            except (Exception,):
                pass

    @permissions(or_(is_admin, is_lider))
    @command_handler(
        regexp=re.compile(r'(?P<group_name>.+)\s+(?P<period>\d+)', re.IGNORECASE),
        argument_miss_msg='–ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "/raid_stat –ì—Ä—É–ø–ø–∞ –ü–µ—Ä–∏–æ–¥(—á–∏—Å–ª–æ –¥–Ω–µ–π)"'
    )
    def _raids_statistics(self, update: Update, match, *args, **kwargs):
        message = update.telegram_update.message
        group_name, period = match.groups()
        group = Group.get_by_name(group_name)
        if not group:
            return self.message_manager.send_message(
                chat_id=message.chat_id,
                text=f'–ì—Ä—É–ø–ø—ã "{group_name}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
            )
        period = int(match.group('period'))
        date_start = message.date.astimezone(settings.timezone).replace(hour=0, minute=0, second=0, microsecond=0) - datetime.timedelta(days=period)

        pls = group.members
        result_dicts = {}
        for player in pls:
            raids = player.raids_assign
            for raid in raids.filter(RaidAssign.time >= date_start).order_by(RaidAssign.time):
                status = self._convert_status.get(raid.status_id, 1)
                if status == 3:
                    status = 4 if (raid.km_assigned in Wasteland.raid_kms_tz) else 3

                if raid.status == 20 and raid.km_assigned in Wasteland.raid_kms_tz:
                    status = 1

                gang_dict = result_dicts.get(group.name, {})
                date = raid.time.strftime('%d.%m.%Y')
                time = raid.time.strftime('%H:%M')
                day_dict = gang_dict.get(date, {})
                time_list = day_dict.get(time, None)
                if not time_list:
                    time_list = []
                time_list.append(
                    {
                        'nickname': player.nickname,
                        'status': status
                    }
                )

                day_dict.update(
                    {
                        time: time_list
                    }
                )
                gang_dict.update(
                    {
                        date: day_dict
                    }
                )
                result_dicts.update(
                    {
                        group.name: gang_dict
                    }
                )

        u = Update()
        u.chat_id = message.chat_id
        u.raid_final_result = result_dicts
        self.event_manager.invoke_handler_update(u)

    # @permissions(is_admin)
    # def _test_new_report(self, update: Update):
    #     raid_time = last_raid(datetime.datetime.now() + datetime.timedelta(seconds = 10))
    #     pins = \

# –¢–∏–ø—ã –ü–ò–ù–æ–≤
# üëä–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏: –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ + –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏—Å—å
# ‚ùå–ù–µ –¥–æ—à–ª–∏: –û—Ç–∫–∞–∑–∞–ª–∏—Å—å + –ù–µ –¥–æ—à–ª–∏
# üòë–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏: –ù–µ –ø—Ä–∏–Ω—è—Ç–æ/–ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ 

# –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è, –∞–≤—Ç–æ —Ä–µ–ø–æ—Ä—Ç–∞

# üëä–†–µ–π–¥ 01:00:00
# ‚è≥–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: 01:00:05

# üì¶05–∫–º WunderWaffe [100.0%]
# üï≥09–∫–º Œîeus Œ£x Machina [100.0%]
#         100%üëä 0%‚ùå 0%üòë
# üíä12–∫–º F«Å»∫«Ågg«Å√ò«ÅAT [80.3%]
# üçó16–∫–º Pro100KAPIBARY [86.0%]
# üîπ20–∫–º –ö–∞–≥–∞–Ω–∞—Ç –í–• [100.0%]
# ‚ù§24–∫–º Œîeus Œ£x Machina [51.2%]
#         100%üëä 0%‚ùå 0%üòë
# üí°28–∫–º New Vegas [100.0%]
# üíæ32–∫–º F«Å»∫«Ågg«Å√ò«ÅAT [100.0%]
# üî©38–∫–º –ö–∞–≥–∞–Ω–∞—Ç –í–• [100.0%]
# üîó46–∫–º New Vegas [95.7%]
# üóº53–∫–º Pro100KAPIBARY [59.8%]
# ‚õ≤54–∫–º –ê–Ω–≥–∏—Ä—Å–∫–∏–π –°–æ–≤–µ—Ç [100.0%]
# ‚ò¢57–∫–º –ê–Ω–≥–∏—Ä—Å–∫–∏–π –°–æ–≤–µ—Ç [100.0%]
# üèõ63–∫–º –ë–∞—Ñ–æ–º–µ—Ç [100.0%]

# –ò—Ç–æ–≥–æ: 100%üëä 0%‚ùå 0%üòë

# üëä–†–µ–π–¥ 01:00:00
# ‚è≥–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: 01:00:05

# üì¶[05–∫–º] WunderWaffe [100.0%]
# üï≥[09–∫–º] Œîeus Œ£x Machina [100.0%]
# üíä[12–∫–º] F«Å»∫«Ågg«Å√ò«ÅAT [80.3%]
# üçó[16–∫–º] Pro100KAPIBARY [86.0%]
# üîπ[20–∫–º] –ö–∞–≥–∞–Ω–∞—Ç –í–• [100.0%]
# ‚ù§Ô∏è[24–∫–º] Œîeus Œ£x Machina [51.2%]
# üí°[28–∫–º] New Vegas [100.0%]
# üíæ[32–∫–º] F«Å»∫«Ågg«Å√ò«ÅAT [100.0%]
# üî©[38–∫–º] –ö–∞–≥–∞–Ω–∞—Ç –í–• [100.0%]
# üîó[46–∫–º] New Vegas [95.7%]
# üóº[53–∫–º] Pro100KAPIBARY [59.8%]
# ‚õ≤Ô∏è[54–∫–º] –ê–Ω–≥–∏—Ä—Å–∫–∏–π –°–æ–≤–µ—Ç [100.0%]
# ‚ò¢Ô∏è[57–∫–º] –ê–Ω–≥–∏—Ä—Å–∫–∏–π –°–æ–≤–µ—Ç [100.0%]
# üèõ[63–∫–º] –ë–∞—Ñ–æ–º–µ—Ç [100.0%]


# ‚óºÔ∏è–¢–æ–ø:
# ‚ñ´Ô∏èŒîeus Œ£x Machina +35ü•¨
# ‚ñ´Ô∏èF«Å»∫«Ågg«Å√ò«ÅAT +35ü•¨
# ‚ñ´Ô∏èPro100KAPIBARY +35ü•¨
# ‚ñ´Ô∏è–ö–∞–≥–∞–Ω–∞—Ç –í–• +35ü•¨
# ‚ñ´Ô∏èNew Vegas +35ü•¨
# ‚ñ´Ô∏è–ê–Ω–≥–∏—Ä—Å–∫–∏–π –°–æ–≤–µ—Ç +35ü•¨
# ‚ñ´Ô∏è–ë–∞—Ñ–æ–º–µ—Ç +20ü•¨
# ‚ñ´Ô∏èWunderWaffe +15ü•¨

# –ê–¥–º–∏–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è, –∞–≤—Ç–æ —Ä–µ–ø–æ—Ä—Ç–∞

# üëä–†–µ–π–¥ –î–ê–¢–ê 01:00:00
# ‚è≥–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:       01:00:05

# ‚úÖüï≥[9–∫–º] 12üëä(+0üìç+0üëü) 100% 
# ‚úÖ‚ù§Ô∏è[24–∫–º] 7üëä(+1üìç+1üëü) 63,2% - –ø—Ä–æ—Ü–µ–Ω—Ç —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–π–¥–∞ —Å –∫–∞–Ω–∞–ª–∞ —Ä—É–ø–æ—Ä–∞ –∏–ª–∏ —Ç–µ—Ä–µ–±–æ–Ω—å–∫

# –ò—Ç–æ–≥–æ ‚Äî 19 –∏–∑ 42 (72.2%) - –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, —É–∫–∞–∑–∞–Ω –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
# –ò—Ç–æ–≥–æ —Å üëü ‚Äî 21 –∏–∑ 42 (73.6%)


# def _parse_raid_result_new(self, bot: telegram.Bot, update: telegram.Update):
#     message = update.message
#     post_id = message.message_id
#     date = message.date.replace(minute=0, second=0, microsecond=0)

#     text = message.text or ''
#     match = self._re_is_raid_result.match(text)
#     if not match:
#         return

#     locations = text.split('\n\n')
#     raid_result = RaidResult.get_or_create(time=date)
#     if raid_result.locations:
#         return
#     for location in locations:
#         location_data = self._re_raid_location.search(location)
#         if not location_data:
#             continue

#         km, location_name, up_rating, league = location_data.group('km', 'location_name', 'rating', 'league')
#         km = int(km)
#         if location_name not in Wasteland.raid_locations:
#             self.message_manager.send_message(chat_id=settings.ADMIN_CHAT_ID, text=f'–ù–æ–≤–∞—è —Ä–µ–π–¥–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è? ({location_name})')

#         raid_goats = self._re_raid_goats.finditer(location)

#         goats_results = {}
#         for goat in raid_goats:
#             name, perent = goat.group('goat', 'percentRaid')
#             group = Group.get_by_name(name, 'goat')
#             if not group:
#                 group = Group.create(name=name, group_type='goat')
#             goats_results.update({name: float(perent)})

#         raid_nicks = self._re_raid_topraiders.search(location)

#         top_raiders = []
#         if raid_nicks:
#             top_raiders = [self._re_raid_nick.search(nicksamp).groups() for nicksamp in raid_nicks.group(1).split(',')]
#         location = RaidResultLocation(raid=raid_result, km=km, )
#         print(km, location_name, up_rating, league, goats_results, top_raiders)
#         if date >= last_raid():
#             self._auto_result()
# (?P<km>\d+)–∫–º\s+(?P<name>.+)\s+üèÜ\+(?P<rating>\d+)
# --(?P<liga>.+)--
# (?P<goats>[\s\S]+)
# üéñ–õ—É—á—à–∏–µ —Ä–µ–π–¥–µ—Ä—ã\s*(?P<raiders>.*)
